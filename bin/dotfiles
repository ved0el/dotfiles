#!/usr/bin/env bash

# =============================================================================
# Dotfiles Manager - Clean, Cross-Platform Installation Script
# =============================================================================
# Features: Interactive/Non-interactive, Profile-based, Cross-platform
# Supports: macOS (Darwin), Linux (Ubuntu, Fedora, Arch, etc.)
# =============================================================================

set -euo pipefail

# =============================================================================
# Configuration & Constants
# =============================================================================
readonly SCRIPT_NAME="dotfiles"
readonly DEFAULT_ROOT="$HOME/.dotfiles"
readonly DEFAULT_PROFILE="minimal"
readonly DEFAULT_VERBOSE="false"
readonly DEFAULT_BRANCH="main"

# URLs - Easy to update
readonly REPO_URL="https://github.com/ved0el/dotfiles.git"
readonly INSTALL_COMMAND_URL="https://tinyurl.com/get-dotfiles"
readonly DOCS_URL="https://github.com/ved0el/dotfiles"

# =============================================================================
# Cross-Platform Detection & Utilities
# =============================================================================
get_os_type() { uname -s; }

get_linux_distro() {
    [[ -f /etc/os-release ]] && source /etc/os-release 2>/dev/null && echo "${ID:-unknown}" || echo "unknown"
}

# Cross-platform stat command
stat_modification_time() {
    local file="$1"
    if command -v stat &>/dev/null; then
        # Try GNU stat first (Linux), fallback to macOS/BSD
        stat --version 2>/dev/null | grep -q "GNU" && stat -c %Y "$file" 2>/dev/null || stat -f %m "$file" 2>/dev/null || echo "0"
    else
        echo "0"
    fi
}

# Cross-platform sed in-place editing
sed_inplace() {
    local file="$1"; shift
    [[ "$(get_os_type)" == "Darwin" ]] && sed -i '' "$@" "$file" || sed -i "$@" "$file"
}

# =============================================================================
# Color & UI Constants
# =============================================================================
# ANSI color codes - compatible with most terminals
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[0;33m'
readonly BLUE='\033[0;34m'
readonly PURPLE='\033[0;35m'
readonly CYAN='\033[0;36m'
readonly WHITE='\033[1;37m'
readonly GRAY='\033[0;90m'
readonly BOLD='\033[1m'
readonly DIM='\033[2m'
readonly NC='\033[0m'  # No Color (reset)

# UI symbols - fallback to ASCII if Unicode not supported
readonly CHECK="âœ“"
readonly CROSS="âœ—"
readonly ARROW="â†’"
readonly BULLET="â€¢"

# =============================================================================
# Logging Functions
# =============================================================================
log_info() { echo -e "${CYAN}${BULLET}${NC} ${WHITE}$1${NC}"; }
log_success() { echo -e "${GREEN}${CHECK}${NC} ${BOLD}$1${NC}"; }
log_warning() { echo -e "${YELLOW}âš ${NC}  ${YELLOW}$1${NC}"; }
log_error() { echo -e "${RED}${CROSS}${NC} ${RED}${BOLD}$1${NC}"; }
log_step() { echo -e "${PURPLE}${ARROW}${NC} ${BOLD}$1${NC}"; }
log_progress() { [[ "${DOTFILES_VERBOSE:-$DEFAULT_VERBOSE}" == "true" ]] && echo -e "${GRAY}${DIM}  $1${NC}"; }
log_verbose() { [[ "${DOTFILES_VERBOSE:-$DEFAULT_VERBOSE}" == "true" ]] && echo -e "${GRAY}${DIM}[VERBOSE] $1${NC}"; }

# =============================================================================
# Validation Functions
# =============================================================================
validate_profile() {
    local profile="$1"
    [[ "$profile" =~ ^(minimal|server|develop)$ ]] || die "Invalid profile '$profile'. Use: minimal, server, or develop"
}

validate_verbose() {
    local verbose="$1"
    [[ "$verbose" =~ ^(true|false)$ ]] || export DOTFILES_VERBOSE="false"
}

is_interactive() { [[ -t 0 && -t 1 ]]; }

die() { log_error "$1"; exit 1; }

# =============================================================================
# Banner & UI Functions
# =============================================================================
show_banner() {
    echo -e "${BOLD}${BLUE}â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®${NC}"
    echo -e "${BOLD}${BLUE}â”‚${NC}                    ${BOLD}${WHITE}ðŸš€ Dotfiles Manager${NC}                         ${BOLD}${BLUE}â”‚${NC}"
    echo -e "${BOLD}${BLUE}â”‚${NC}              ${GRAY}Clean, Cross-Platform Setup${NC}              ${BOLD}${BLUE}â”‚${NC}"
    echo -e "${BOLD}${BLUE}â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯${NC}"
    echo
}

show_section() {
    echo; echo -e "${BOLD}${PURPLE}â—† $1${NC}"
    echo -e "${GRAY}${DIM}â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€${NC}"
}

show_subsection() { echo -e "${CYAN}${BULLET} ${BOLD}$1${NC}"; }

# =============================================================================
# Configuration Management
# =============================================================================
load_config() {
    local zshenv="$HOME/.zshenv"
    [[ ! -f "$zshenv" ]] && { export DOTFILES_CONFIG_LOADED_FROM_ZSHENV=false; log_verbose "No existing configuration found"; return; }

    # Extract dotfiles variables
    local root profile verbose
    root=$(grep "^export DOTFILES_ROOT=" "$zshenv" 2>/dev/null | cut -d'=' -f2- | tr -d '"')
    profile=$(grep "^export DOTFILES_PROFILE=" "$zshenv" 2>/dev/null | cut -d'=' -f2- | tr -d '"')
    verbose=$(grep "^export DOTFILES_VERBOSE=" "$zshenv" 2>/dev/null | cut -d'=' -f2- | tr -d '"')

    [[ -n "$root" ]] && export DOTFILES_ROOT="$root"
    [[ -n "$profile" ]] && export DOTFILES_PROFILE="$profile"
    [[ -n "$verbose" ]] && export DOTFILES_VERBOSE="$verbose"

    export DOTFILES_CONFIG_LOADED_FROM_ZSHENV=true
    log_verbose "Configuration loaded from ~/.zshenv"
}

save_config() {
    [[ "${DOTFILES_CONFIG_LOADED_FROM_ZSHENV:-false}" == "true" ]] && return 0

    local zshenv="$HOME/.zshenv"
    touch "$zshenv"

    # Remove existing dotfiles exports
    sed_inplace "$zshenv" '/^export DOTFILES_/d'

    # Add new configuration
    cat >> "$zshenv" << EOF

# Dotfiles Configuration - Auto-generated
export DOTFILES_ROOT="$DOTFILES_ROOT"
export DOTFILES_PROFILE="$DOTFILES_PROFILE"
export DOTFILES_VERBOSE="$DOTFILES_VERBOSE"
EOF

    log_verbose "Configuration saved to ~/.zshenv"
}

# =============================================================================
# Environment Setup
# =============================================================================
setup_environment() {
    show_section "Configuration Setup"

    # Load existing configuration
    load_config

    # Set defaults
    export DOTFILES_ROOT="${DOTFILES_ROOT:-$DEFAULT_ROOT}"
    export DOTFILES_PROFILE="${DOTFILES_PROFILE:-$DEFAULT_PROFILE}"
    export DOTFILES_VERBOSE="${DOTFILES_VERBOSE:-$DEFAULT_VERBOSE}"
    export DOTFILES_BRANCH="${DOTFILES_BRANCH:-$DEFAULT_BRANCH}"

    # Auto-detect repository
    if [[ -z "${DOTFILES_REPO:-}" ]]; then
        if [[ -d "$SCRIPT_DIR/.git" ]]; then
            DOTFILES_REPO=$(cd "$SCRIPT_DIR" && git remote get-url origin 2>/dev/null || echo "")
            log_verbose "Auto-detected repository from local git"
        else
            DOTFILES_REPO="$REPO_URL"
            log_verbose "Using default repository"
        fi
    fi
    export DOTFILES_REPO

    # Validate settings
    validate_profile "$DOTFILES_PROFILE"
    validate_verbose "$DOTFILES_VERBOSE"

}

# =============================================================================
# Repository Management
# =============================================================================
setup_repository() {
    show_section "Repository Management"

    if [[ -d "$DOTFILES_ROOT/.git" ]]; then
        log_step "Updating existing repository"
        cd "$DOTFILES_ROOT"
        log_progress "Fetching latest changes..."
        git fetch origin >/dev/null 2>&1
        log_progress "Switching to branch '$DOTFILES_BRANCH'..."
        git checkout "$DOTFILES_BRANCH" >/dev/null 2>&1
        log_progress "Pulling latest changes..."
        git pull origin "$DOTFILES_BRANCH" >/dev/null 2>&1
    else
        log_step "Cloning repository"
        [[ -n "$DOTFILES_REPO" ]] || die "Repository URL not specified"
        log_progress "Downloading from $DOTFILES_REPO..."
        git clone -b "$DOTFILES_BRANCH" "$DOTFILES_REPO" "$DOTFILES_ROOT" >/dev/null 2>&1
    fi

    cd "$DOTFILES_ROOT"
    log_success "Repository ready at $DOTFILES_ROOT"
}

# =============================================================================
# Symlink Management
# =============================================================================
readonly EXCLUDE_PATTERNS=(
    "README.md" ".gitignore" "install" "bin" "config" "zshrc.d"
    ".vscode" ".git" "*.zwc" "*.zwc.old"
)

should_exclude() {
    local item="$1"
    for pattern in "${EXCLUDE_PATTERNS[@]}"; do
        [[ "$item" == $pattern ]] && return 0
    done
    return 1
}

create_symlinks() {
    show_section "Creating Symlinks"

    mkdir -p "$HOME/.config"
    local link_count=0

    # Link root directory files
    show_subsection "Linking root files to home directory"
    for item in *; do
        if [[ -e "$item" ]] && ! should_exclude "$item"; then
            local target="$HOME/.$item"

            # Remove existing symlink or file
            [[ -L "$target" || -e "$target" ]] && rm -rf "$target"

            # Create symlink
            ln -sf "$(pwd)/$item" "$target"
            log_progress "$item ${ARROW} ~/$item"
            ((link_count++))
        fi
    done

    # Link config directory
    if [[ -d "config" ]]; then
        show_subsection "Linking config files"
        for item in config/*; do
            if [[ -e "$item" ]]; then
                local name=$(basename "$item")
                local target="$HOME/.config/$name"

                # Ensure target directory exists
                mkdir -p "$(dirname "$target")"

                # Remove existing
                [[ -L "$target" || -e "$target" ]] && rm -rf "$target"

                # Create symlink
                ln -sf "$(pwd)/$item" "$target"
                log_progress "config/$name ${ARROW} ~/.config/$name"
                ((link_count++))
            fi
        done
    fi

    log_success "Created $link_count symlinks"
}

verify_symlinks() {
    show_section "Verifying Symlinks"

    local total_links=0 broken_links=0

    # Check root symlinks
    show_subsection "Checking root symlinks"
    for item in *; do
        if [[ -e "$item" ]] && ! should_exclude "$item"; then
            local target="$HOME/.$item"
            ((total_links++))
            if [[ ! -L "$target" ]] || [[ ! -e "$target" ]]; then
                log_error "Broken symlink: ~/$item"
                ((broken_links++))
            fi
        fi
    done

    # Check config symlinks
    if [[ -d "config" ]]; then
        show_subsection "Checking config symlinks"
        for item in config/*; do
            if [[ -e "$item" ]]; then
                local name=$(basename "$item")
                local target="$HOME/.config/$name"
                ((total_links++))
                if [[ ! -L "$target" ]] || [[ ! -e "$target" ]]; then
                    log_error "Broken symlink: ~/.config/$name"
                    ((broken_links++))
                fi
            fi
        done
    fi

    if [[ $broken_links -eq 0 ]]; then
        log_success "All $total_links symlinks are working"
    else
        log_warning "Found $broken_links broken symlinks out of $total_links total"
        return 1
    fi
}

# =============================================================================
# Package Installation
# =============================================================================
install_packages() {
    show_section "Package Installation"

    # Check if zsh is available
    command -v zsh &>/dev/null || {
        log_warning "zsh not found, skipping package installation"
        return 0
    }

    log_info "Installing packages for profile: $DOTFILES_PROFILE"

    # Determine which packages to install based on profile
    local pkg_patterns=()
    case "$DOTFILES_PROFILE" in
        minimal) pkg_patterns=('*_m_*.zsh') ;;
        server)  pkg_patterns=('*_m_*.zsh' '*_s_*.zsh') ;;
        develop) pkg_patterns=('*_m_*.zsh' '*_s_*.zsh' '*_d_*.zsh') ;;
    esac

    # Source each matching package file to trigger installation
    (   # Subshell to contain shopt changes
        shopt -s nullglob  # Allow empty globs
        for pattern in "${pkg_patterns[@]}"; do
            for pkg_file in "$DOTFILES_ROOT/zshrc.d/pkg/$pattern"; do
                if [[ -f "$pkg_file" ]]; then
                    log_progress "Loading package: $(basename "$pkg_file")"
                    source "$pkg_file"
                fi
            done
        done
    )

    log_success "Package installation completed"
}

# =============================================================================
# Profile Management
# =============================================================================
configure_profile() {
    log_info "Configuring profile: $DOTFILES_PROFILE"
    save_config
    log_success "Profile configured successfully"
}

# =============================================================================
# Main Installation Flow
# =============================================================================
install_dotfiles() {
    show_banner
    log_step "Starting dotfiles installation"

    setup_environment
    setup_repository
    install_packages
    create_symlinks
    verify_symlinks
    configure_profile

    # Success message
    echo
    echo -e "${BOLD}${GREEN}â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®${NC}"
    echo -e "${BOLD}${GREEN}â”‚${NC}${BOLD}${WHITE}                    ðŸŽ‰ Installation Complete!                   ${NC}${BOLD}${GREEN}â”‚${NC}"
    echo -e "${BOLD}${GREEN}â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯${NC}"
    echo

    log_success "Profile '$DOTFILES_PROFILE' is now active"

    # Show what's included
    echo
    echo -e "${BOLD}${WHITE}What's Included:${NC}"
    case "$DOTFILES_PROFILE" in
        minimal)
            echo -e "  ${GREEN}${CHECK}${NC} Shell essentials (zsh, sheldon, tmux)"
            ;;
        server)
            echo -e "  ${GREEN}${CHECK}${NC} Shell + utilities (bat, fzf, eza, fd, ripgrep, tealdeer, zoxide)"
            ;;
        develop)
            echo -e "  ${GREEN}${CHECK}${NC} Full development environment"
            echo -e "  ${GREEN}${CHECK}${NC} All server tools + dev tools (nvm, pyenv, goenv, curlie)"
            ;;
    esac

    # Start new shell
    if command -v zsh &>/dev/null; then
        log_info "Starting new zsh shell..."
        exec zsh -l </dev/null
    else
        log_warning "zsh not found, please restart your terminal manually"
    fi
}

# =============================================================================
# Uninstallation
# =============================================================================
uninstall_dotfiles() {
    log_warning "This will remove all dotfiles symlinks and configuration"

    if is_interactive; then
        echo -n "Are you sure? [y/N]: "
        read -r response
        [[ ! "$response" =~ ^[Yy]$ ]] && { log_info "Uninstallation cancelled"; return 0; }
    fi

    local unlink_count=0

    # Remove root symlinks
    if [[ -d "$DOTFILES_ROOT" ]]; then
        for item in "$DOTFILES_ROOT"/*; do
            [[ -f "$item" ]] || continue
            local name="$(basename "$item")"
            local target="$HOME/.$name"
            if [[ -L "$target" ]] && [[ "$(readlink "$target")" == *"/.dotfiles/"* ]]; then
                rm "$target"
                ((unlink_count++))
            fi
        done
    fi

    # Remove config symlinks
    if [[ -d "$HOME/.config" ]]; then
        for item in "$HOME/.config"/*; do
            if [[ -L "$item" ]] && [[ "$(readlink "$item")" == *"/.dotfiles/"* ]]; then
                rm "$item"
                ((unlink_count++))
            fi
        done
    fi

    # Remove from .zshenv
    local zshenv="$HOME/.zshenv"
    if [[ -f "$zshenv" ]]; then
        sed_inplace "$zshenv" '/^export DOTFILES_/d'
        sed_inplace "$zshenv" '/^# Dotfiles Configuration/d'
    fi

    # Remove dotfiles directory
    [[ -d "$DOTFILES_ROOT" ]] && rm -rf "$DOTFILES_ROOT"

    log_success "Removed $unlink_count symlinks and dotfiles directory"
}

# =============================================================================
# Interactive Menu
# =============================================================================
show_menu() {
    clear
    show_banner

    echo -e "${BOLD}${WHITE}Current Configuration:${NC}"
    echo -e "  ${GRAY}OS:${NC}                  ${PURPLE}$(get_os_type)${NC}"
    echo -e "  ${GRAY}Path:${NC}                ${CYAN}${DOTFILES_ROOT:-$DEFAULT_ROOT}${NC}"
    echo -e "  ${GRAY}Profile:${NC}             ${YELLOW}${DOTFILES_PROFILE:-$DEFAULT_PROFILE}${NC}"
    echo -e "  ${GRAY}Verbose:${NC}             ${GREEN}${DOTFILES_VERBOSE:-$DEFAULT_VERBOSE}${NC}"

    echo
    echo -e "${BOLD}${WHITE}Available Actions:${NC}"
    echo -e "  ${CYAN}1)${NC} Install/Update dotfiles"
    echo -e "  ${CYAN}2)${NC} Change profile (minimal/server/develop)"
    echo -e "  ${CYAN}3)${NC} Create/refresh symlinks only"
    echo -e "  ${CYAN}4)${NC} Install required packages"
    echo -e "  ${CYAN}5)${NC} Verify symlinks"
    echo -e "  ${CYAN}6)${NC} Uninstall everything"
    echo -e "  ${CYAN}7)${NC} Show help"
    echo -e "  ${CYAN}q)${NC} Quit"

    echo
    echo -n "Choose an option [1-7,q]: "
}

interactive_menu() {
    while true; do
        show_menu
        read -r choice

        case "$choice" in
            1)
                install_dotfiles
                ;;
            2)
                echo -n "Enter new profile (minimal/server/develop): "
                read -r new_profile
                case "$new_profile" in
                    minimal|server|develop)
                        export DOTFILES_PROFILE="$new_profile"
                        log_success "Profile changed to: $new_profile"
                        ;;
                    *) log_error "Invalid profile. Use: minimal, server, or develop" ;;
                esac
                sleep 2
                ;;
            3)
                cd "$DOTFILES_ROOT"
                create_symlinks
                verify_symlinks
                echo -e "\n${GRAY}${DIM}Press Enter to continue...${NC}"
                read -r
                ;;
            4)
                install_packages
                echo -e "\n${GRAY}${DIM}Press Enter to continue...${NC}"
                read -r
                ;;
            5)
                cd "$DOTFILES_ROOT"
                verify_symlinks
                echo -e "\n${GRAY}${DIM}Press Enter to continue...${NC}"
                read -r
                ;;
            6)
                uninstall_dotfiles
                [[ $? -eq 0 ]] && exit 0
                echo -e "\n${GRAY}${DIM}Press Enter to continue...${NC}"
                read -r
                ;;
            7)
                echo
                echo -e "${BOLD}${PURPLE}Help - Dotfiles Manager${NC}"
                echo
                echo -e "${BOLD}${WHITE}Installation:${NC}"
                echo -e "  ${CYAN}${BULLET}${NC} Interactive: bash <(curl -fsSL $INSTALL_COMMAND_URL)"
                echo -e "  ${CYAN}${BULLET}${NC} One-liner:   curl -fsSL $INSTALL_COMMAND_URL | bash"
                echo
                echo -e "${BOLD}${WHITE}Profiles:${NC}"
                echo -e "  ${YELLOW}minimal${NC}  - Shell essentials (sheldon, tmux)"
                echo -e "  ${YELLOW}server${NC}   - Shell + utilities (bat, fzf, eza, etc.)"
                echo -e "  ${YELLOW}develop${NC}  - Full development environment"
                echo
                echo -e "${BOLD}${WHITE}Environment Variables:${NC}"
                echo -e "  ${CYAN}DOTFILES_ROOT${NC}     - Installation directory"
                echo -e "  ${CYAN}DOTFILES_PROFILE${NC}  - Profile selection"
                echo -e "  ${CYAN}DOTFILES_VERBOSE${NC}  - Enable verbose logging"
                echo
                echo -e "${GRAY}${DIM}Press Enter to continue...${NC}"
                read -r
                ;;
            q)
                save_config
                log_success "Goodbye!"
                exit 0
                ;;
            *) log_error "Invalid choice"; sleep 1 ;;
        esac
    done
}

# =============================================================================
# Command Line Interface
# =============================================================================
show_usage() {
    cat << EOF
Usage: dotfiles [COMMAND]

Commands:
  install     Install or update dotfiles (default)
  uninstall   Remove all dotfiles and configuration
  link        Create or refresh symlinks only
  profile     Change profile (minimal/server/develop)
  packages    Install required packages for current profile
  verify      Verify all symlinks are working
  help        Show this help message

Examples:
  dotfiles                    # Interactive installation
  dotfiles install            # Install/update dotfiles
  dotfiles profile server     # Change to server profile
  DOTFILES_PROFILE=server dotfiles install

For more information, visit: $DOCS_URL
EOF
}

# =============================================================================
# Main Function
# =============================================================================
main() {
    # Initialize
    readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

    # Load existing configuration
    load_config

    # Parse command line arguments
    case "${1:-}" in
        install|"")
            if is_interactive && [[ -z "${1:-}" ]]; then
                interactive_menu
            else
                install_dotfiles
            fi
            ;;
        uninstall)
            uninstall_dotfiles
            ;;
        link)
            cd "$DOTFILES_ROOT"
            create_symlinks
            verify_symlinks
            ;;
        profile)
            if [[ -n "${2:-}" ]]; then
                case "$2" in
                    minimal|server|develop)
                        export DOTFILES_PROFILE="$2"
                        save_config
                        log_success "Profile changed to: $2"
                        ;;
                    *) die "Invalid profile '$2'. Use: minimal, server, or develop" ;;
                esac
            else
                die "Profile name required. Usage: dotfiles profile <minimal|server|develop>"
            fi
            ;;
        packages)
            install_packages
            ;;
        verify)
            cd "$DOTFILES_ROOT"
            verify_symlinks
            ;;
        help|--help|-h)
            show_usage
            ;;
        *)
            log_error "Unknown command: $1"
            echo
            show_usage
            exit 1
            ;;
    esac
}

# Run main function
main "$@"

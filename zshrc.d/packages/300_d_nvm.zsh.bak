#!/usr/bin/env zsh

# =============================================================================
# NVM - Node Version Manager
# =============================================================================

# -----------------------------------------------------------------------------
# Package Configuration
# -----------------------------------------------------------------------------
PACKAGE_NAME="nvm"
PACKAGE_DESC="Node Version Manager for managing Node.js versions"
PACKAGE_DEPS="curl git"
PACKAGE_TYPE="script"

# Set NVM_DIR early to avoid parameter not set errors
export NVM_DIR="${NVM_DIR:-$HOME/.nvm}"

# -----------------------------------------------------------------------------
# Installation Functions
# -----------------------------------------------------------------------------
pre_install() {
  log_debug "Preparing NVM installation..."
  export NVM_DIR="$HOME/.nvm"
  
  # Create nvm directory if it doesn't exist
  if [[ ! -d "$NVM_DIR" ]]; then
    mkdir -p "$NVM_DIR"
  fi
  return 0
}

post_install() {
  if [[ ! -s "$NVM_DIR/nvm.sh" ]]; then
    log_error "$PACKAGE_NAME installation incomplete"
    return 1
  fi

  log_debug "Setting up NVM configuration..."
  
  # Load nvm
  source "$NVM_DIR/nvm.sh"

  # Install Node.js LTS version
  nvm install --lts
  nvm use --lts

  log_success "$PACKAGE_NAME installed and ready"
  return 0
}

# -----------------------------------------------------------------------------
# Custom Installation
# -----------------------------------------------------------------------------
install_script() {
  log_info "Installing $PACKAGE_NAME using install script..."
  
  if [[ ! -d "$HOME/.nvm" ]]; then
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
    export NVM_DIR="$HOME/.nvm"
    return 0
  else
    log_debug "NVM already installed"
    return 0
  fi
}

# -----------------------------------------------------------------------------
# Package Initialization
# -----------------------------------------------------------------------------
init() {
  if [[ -n "$NVM_DIR" && -d "$NVM_DIR" && -s "$NVM_DIR/nvm.sh" ]]; then
    log_debug "Initializing NVM lazy loading"
    
    # NVM lazy loading implementation
    lazy_load_nvm() {
      unset -f node npm npx nvm
      export NVM_DIR="$HOME/.nvm"
      
      if [[ -s "$NVM_DIR/nvm.sh" ]]; then
        source "$NVM_DIR/nvm.sh"
        [[ -s "$NVM_DIR/bash_completion" ]] && source "$NVM_DIR/bash_completion"
      fi
    }

    # Create lazy loading stubs
    node() { lazy_load_nvm; node "$@" }
    npm() { lazy_load_nvm; npm "$@" }
    npx() { lazy_load_nvm; npx "$@" }
    nvm() { lazy_load_nvm; nvm "$@" }
    
    return 0
  else
    log_debug "NVM not available, skipping initialization"
    return 1
  fi
}

# -----------------------------------------------------------------------------
# Automatic Installation Flow
# -----------------------------------------------------------------------------
if ! is_package_installed "$PACKAGE_NAME"; then
  pre_install || return 1
  install_script && post_install
fi
